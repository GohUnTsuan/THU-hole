{"code": 0, "data": [{"cid": 1314374, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "```c++\nvoid ************foo;\n```\nc c++ 标准规定 编译器至少要支持 12 级指针\n\nport70.net/~nsz/c/c11/n1570.html#5.2.4.1", "timestamp": 1616428369, "type": "text", "url": ""}, {"cid": 1314388, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Alice", "pid": 258487, "reply_to": -1, "tag": null, "text": "看到指针脑壳疼，👴去写java了", "timestamp": 1616428496, "type": "text", "url": ""}, {"cid": 1314390, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c# 的隐藏关键字 field，用于对自动生成的值域修饰\n```c#\n[field: bar]\nint foo { get; set; }\n```", "timestamp": 1616428508, "type": "text", "url": ""}, {"cid": 1314528, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Bob", "pid": 258487, "reply_to": -1, "tag": null, "text": "Cy", "timestamp": 1616429701, "type": "text", "url": ""}, {"cid": 1314822, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Carol", "pid": 258487, "reply_to": -1, "tag": null, "text": "催更", "timestamp": 1616432361, "type": "text", "url": ""}, {"cid": 1314833, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Dave", "pid": 258487, "reply_to": -1, "tag": null, "text": "草 12级指针是什么阴间代码", "timestamp": 1616432474, "type": "text", "url": ""}, {"cid": 1314839, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Dave", "pid": 258487, "reply_to": -1, "tag": null, "text": "https://github.com/leisurelicht/wtfpython-cn\n贡献一个Python的", "timestamp": 1616432538, "type": "text", "url": ""}, {"cid": 1315355, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c++ 17 起可以为字面值整数提高可读性，编译器无视单引号\n```c++\nint foo = 1926'08'17;\n```", "timestamp": 1616461719, "type": "text", "url": ""}, {"cid": 1315373, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c++ 14 起可以使用如下 lambda 签名\n```c++\nauto func = [](auto &&foo, auto &&bar) { return foo + bar };\n```\nc++ 20 起可以写出如下函数声明\n```c++\nauto func(auto foo, auto bar) {\n    return foo + bar;\n}\n```\n简单说放宽了 auto 的使用", "timestamp": 1616461977, "type": "text", "url": ""}, {"cid": 1315421, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c++ 可以重载逗号运算符\n```c++\nfoo operator,(foo, foo);\n```", "timestamp": 1616462509, "type": "text", "url": ""}, {"cid": 1315486, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c++\n有如下声明\n```c++\nstruct foo {\n    int func() const;\n};\n\ntemplate <typename T, typename U>\nvoid bar(U T::*);\n\ntemplate <typename T, typename U, typename... Args>\nvoid bar(U (T::*)(Args...));\n```\n`bar(&foo::func)` 匹配第一个重载，`T` 为 `foo`，`U` 为 `int()`\n\n但是\n```c++\nint (foo::*bar)() = &foo::func;\n```\n是错的", "timestamp": 1616463615, "type": "text", "url": ""}, {"cid": 1315494, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "洞主头发茂密 身体健康 请不要脑补肥宅或竹竿", "timestamp": 1616463786, "type": "text", "url": ""}, {"cid": 1315607, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Eve", "pid": 258487, "reply_to": -1, "tag": null, "text": "Re 洞主: 1926‘08’17（要素察觉）", "timestamp": 1616465709, "type": "text", "url": ""}, {"cid": 1316062, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c 和 c++ 的 `? :` 的优先级不同\nc++ 中其与赋值类运算符等优先级 而 c 中比它们高\n这导致 `a = true ? b : c = d`\n在 c++ 中解释为 `a = (true ? b : (c = d))`，这是合法的\n在 c 中解释为 `a = (true ? b : c) = d`，这是非法的", "timestamp": 1616472184, "type": "text", "url": ""}, {"cid": 1316090, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "msvc 的模板实现是错的", "timestamp": 1616472564, "type": "text", "url": ""}, {"cid": 1316355, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "`typename std::map<T, U>::value_type` 为 `std::pair<const T, U>`\n也就是说用 `const std::pair<T, U> &` 引用反而会导致一次拷贝", "timestamp": 1616476090, "type": "text", "url": ""}, {"cid": 1316700, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c c++ c# 中一元 `+` 是 no-op，几乎只用于重载", "timestamp": 1616480722, "type": "text", "url": ""}, {"cid": 1324997, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c++ 中 `this` 只能严格地出现在函数体内，即 `{ ... }`", "timestamp": 1616593812, "type": "text", "url": ""}, {"cid": 1325028, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c# 的 duck type `dynamic` 非常不建议使用 无论是性能还是设计角度", "timestamp": 1616594010, "type": "text", "url": ""}, {"cid": 1325076, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c# 的隐藏关键字 `__arglist __reftype __makeref __refvalue` 双下划线开头且没有文档就说明... 不要用 看看就好", "timestamp": 1616594313, "type": "text", "url": ""}, {"cid": 1355068, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c# 的 `System.Runtime.CompilerServices` 命名空间下有底层一些的接口\n　\n想禁止内联？\n```c#\n[MethodImpl(MethodImplOptions.NoInlining)]\npublic void foo() { }\n```", "timestamp": 1617014421, "type": "text", "url": ""}, {"cid": 1356278, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c# 的 `partial` 函数 零运行时开销的弱化接口", "timestamp": 1617026491, "type": "text", "url": ""}, {"cid": 1469222, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c++ 中 `friend` 可以接函数定义", "timestamp": 1618624248, "type": "text", "url": ""}, {"cid": 1469428, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 258487, "reply_to": -1, "tag": null, "text": "c 中\n```\nvoid foo(bar)\nint bar;\n{ }\n```\n这种语法十分古老，被调用时不管再次声明的形参类型，统一提升实参类型再转换为形参类型\n由于各种缺点，在 C23 废除", "timestamp": 1618627772, "type": "text", "url": ""}], "post": {"deleted": false, "image_metadata": {}, "likenum": 16, "pid": 258487, "reply": 24, "tag": null, "text": "编程语言的冷门事实们", "timestamp": 1616428172, "type": "text", "updated_at": 1618627771, "url": "", "vote": {}}}