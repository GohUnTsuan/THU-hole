{"code": 0, "data": [{"cid": 3140640, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Alice", "pid": 594791, "reply_to": -1, "tag": null, "text": "c", "timestamp": 1639140393, "type": "text", "url": ""}, {"cid": 3140652, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Bob", "pid": 594791, "reply_to": -1, "tag": null, "text": "看你想学了做什么，如果不是必须深入硬件完全没必要学这两个。这不仅是说它们有特别的难点，也是说它们不见得适合养成好的编程思维。", "timestamp": 1639140710, "type": "text", "url": ""}, {"cid": 3140657, "deleted": false, "image_metadata": {}, "is_dz": true, "name": "洞主", "pid": 594791, "reply_to": 3140652, "tag": null, "text": "Re Bob: 就是想能做一些软件和程序，或者说先养成自己的编程思维？（dz也不是特别清楚，不过我觉得应该先学才能了解？）希望提升自己这方面的能力的话，bob有什么推荐吗？谢谢谢谢", "timestamp": 1639140887, "type": "text", "url": ""}, {"cid": 3140673, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Carol", "pid": 594791, "reply_to": -1, "tag": null, "text": "c，c++是在c的基础上发展的，dz学会了c的基本语法，然后补上类相关的知识基本上也就会c++了\n当然编程思维之类的就得多看多码了", "timestamp": 1639141051, "type": "text", "url": ""}, {"cid": 3140769, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Dave", "pid": 594791, "reply_to": -1, "tag": null, "text": "cz是先学的Python，当时修辅修在大一小学期上了Python的课，而主修教学计划是大二上才上程设，导致Python成为了cz第一门编程课，之后大二上立刻同时上了程设（C）、数据结构（C++）、数科导（Python+少量SQL），感觉体验挺好的（？）", "timestamp": 1639142333, "type": "text", "url": ""}, {"cid": 3140900, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Bob", "pid": 594791, "reply_to": 3140673, "tag": null, "text": "Re Carol: 这样显然是只是能写 C++，称上会是不行的。事实上 C++ 的面向对象模型也不太经常被新语言采用了，如果认为 C++ 就是面向对象的典范未免会局限思维。当然，C++ 可学的点很多，比如资源管理/raii（大体不如 Rust），比如模板（能力异常强但是太杂乱），但是依这个学习路线显然没碰到皮毛。", "timestamp": 1639145189, "type": "text", "url": ""}, {"cid": 3141104, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Bob", "pid": 594791, "reply_to": -1, "tag": null, "text": "刚才写了不少想法然后还是删了…我的想法可能不见得每个人都接受，虽然我确信是有理的。\n总而言之，适合初学的语言应该易于思考程序的效果，而不应该有各种各样莫名其妙的意外，这样初学者容易养成思考程序结构的习惯，而不是糊一个今天 work 明天就不一定的东西了事。\n但是今天有名（从而有活跃社区、库多）、工具完整好用、设计精良从而易于思考适合初学者的语言不存在。每个主流语言都有或多或少的问题。所以还是需要考虑实际。\n实际上 Python 很好用，它库非常多，工具完整，但是缺乏静态类型，用太多语法糖来巧妙取代应有的功能，抽象能力也不过一般。\n实际上 JavaScript 或者说 TypeScript 很好用，库也多，还方便写网页有成就感。当然，不写网页也是可以的，但是它的历史使它和 web 绑定了。问题是它的 good part 相比于 bad part 真是少之又少，如果只看 good part，确实是比较精妙的语言。\n实际上 Rust 很棒，工具链非常好，但它强制你思考一些不写底层程序就不需要思考的东西，不适合初学者。C++ 则是隐藏了这些需要思考的东西，以至于必须有《Effective C++》《More Effective C++》教你怎么写合理的 C++。它的历史包袱也很大，很多是从 C 遗留下来的。C++ 名气大很大程度也是历史原因，底层语言跑得就是快，不过现在也有 Rust 了。\n如果不喜欢八股文，Java 就不表了。不过 JVM 还是不错的，Java 库也多，所以有了 JVM 上的语言这种东西。但这些语言一般面向会 Java 的人。Scala 很好，但隐晦的东西不少。Kotlin 是 Scala  的阉割版，和 Java 互通强于 Scala。但是它们都不打算作为初学者的第一门语言。\n不评论 Go。\nHaskell 需要你有比较扎实的代数功底。函数式语言是最适合思考的，但这也意味着如果不思考，根本写不出合适的代码。当然还有老些的 Lisp 及其方言。SICP 是本有趣的书，基于 Lisp 的方言 Scheme，不过 Lisp 更是没什么人用了。\n当然还有各种不太出名的语言。越不出名，库多半越少，以至于写不出成就感，做不了实事。\n评论了一番，但是还是没有什么好结论。这么说的话，Python 对于外行人来说可能是个比较实际的选择。我听说过有 SICP in Python，如果喜欢自学可以一试。书我推荐不来，我也不知道我怎么学会的。", "timestamp": 1639148339, "type": "text", "url": ""}, {"cid": 3141126, "deleted": false, "image_metadata": {}, "is_dz": false, "name": "Eve", "pid": 594791, "reply_to": 3141104, "tag": null, "text": "Re Bob: 很棒，谢谢你", "timestamp": 1639148599, "type": "text", "url": ""}], "post": {"deleted": false, "image_metadata": {}, "likenum": 6, "pid": 594791, "reply": 8, "tag": null, "text": "dz小白想问计算机先学c++还是c呢？\n都要说明书推荐吗\n谢谢大家", "timestamp": 1639140018, "type": "text", "updated_at": 1639148598, "url": "", "vote": {}}}